function getTimerName(n){return $(n).parent().attr("data-timer")}(function(n,t){t.widget("rn.RnTimer",{options:{debug:!1,onAddTimer:null,onStart:null,onStop:null,onPause:null,onSetInterval:null,onStartAll:null,onStopAll:null,onPauseAll:null,onAddCallback:null,onRemoveCallback:null,onClearCallbacks:null,onChangeAllIntervals:null},_timers:{},_create:function(){},_setOption:function(n,t){this.options[n]=t},_fireEvent:function(n,t,i){this.options[n]&&this.options[n].call(t||this,i)},destroy:function(){t.Widget.prototype.destroy.call(this)},_runTimer:function(n){var i=this.get(n),r;i!=null&&i.running&&(r=this,setTimeout(function(){i.callCount++,r._debug("Number of calls: "+i.callCount+" ("+i.running+") (Int: "+i.interval+") (Timer: "+i.name+")"),t.each(i.callbacks,function(t,u){u.enabled&&(r._debug("firing callback ["+t+'] on timer "'+n+'"'),u.callCount++,u.fn.call(u,i.callCount,u.args),u.lifespan!==0&&u.lifespan==u.callCount&&console.log("expire me!"))}),i.running&&r._runTimer(n)},this._timers[n].interval))},_debug:function(t){this.options.debug&&n.console&&n.console.log&&n.console.log(t)},exists:function(n){return n===undefined?!0:this._timers[n]!==undefined},add:function(n,i,r,u,f,e){if(this.exists(n)){t.error('RnTimer: There is already a timer called "'+n+'"');return}this._debug('adding new timer "'+n+'" (int:'+i+")"),this._timers[n]={name:n,interval:i,running:r||!1,paused:!1,callCount:0,callbacks:{}},u!==null&&u!==undefined&&this.addCallback(n,e||"default",u,f),this._fireEvent("onAdd",this._timers[n]),this._timers[n].running&&this._runTimer(n)},setInterval:function(n,t){var i=this.get(n),r;i!=null&&(r=i.interval,i.interval=t,this._debug('setting interval for timer "'+n+'" to '+t+"ms"),this._fireEvent("onSetInterval",i,{oldInt:r,newInt:t}))},start:function(n){var t=this.get(n);t.running||(this._debug('starting timer "'+n+'"'),t.running=!0,t.paused=!1,this._runTimer(n),this._fireEvent("onStart",t))},stop:function(n){var t=this.get(n);t&&(this._debug('stopping timer "'+n+'"'),t.running=!1,this._fireEvent("onStop",t))},get:function(n){return this._timers[n]==undefined?(t.error('Timer "'+n+'" does not exist!'),null):this._timers[n]},pause:function(n,t){var i=this.get(n),r;i!=null&&!i.paused&&i.running&&(r=this,i.paused=!0,i.running=!1,this._debug('pausing timer "'+n+'" for '+t+"ms"),this._fireEvent("onPause",i,{pauseTimeMs:t}),setTimeout(function(){r._debug('timer "'+n+'" has awoken from its sleep'),i.paused&&(i.running=!0,i.paused=!1,r._runTimer(n))},t))},addCallback:function(n,t,i,r,u){var f=this.get(n);f!=null&&(f.callbacks[t]={timerName:n,args:r,fn:i,enabled:!0,callCount:0,lifespan:u||0},this._debug("Added new callback ("+t+") to timer ("+n+")"),this._fireEvent("onAddCallback",f,{name:t}))},removeCallback:function(n,t){var i=this.get(n);i!=null&&i.callbacks[t]&&(delete i.callbacks[t],this._debug("removing callback ("+t+") from timer ("+n+")"),this._fireEvent("onRemoveCallback",i,{name:t}))},clearCallbacks:function(n){var t=this.get(n);t!=null&&(this.stop(n),delete t.callbacks,t.callbacks={},this._debug('removed all callbacks from timer "'+n+'"'),this._fireEvent("onClearCallbacks",t))},getCallbacks:function(n){var t=this.get(n);return t==null?null:t.callbacks},startAll:function(){var n=this;t.each(this._timers,function(t){n.start(t)}),this._fireEvent("onStartAll")},stopAll:function(){var n=this;t.each(this._timers,function(t){n.stop(t)}),this._fireEvent("stoppedAll")},pauseAll:function(n){var i=this;t.each(this._timers,function(t){i.pause(t,n)}),this._fireEvent("onPauseAll",null,{pauseTimeMs:n})},changeAllIntervals:function(n){var i=this;t.each(this._timers,function(t){i.setInterval(t,n)}),this._fireEvent("onChangeAllIntervals",null,{newInt:n})}}),t(n).RnTimer()})(window,jQuery),$(document).ready(function(){$(window).RnTimer("option","debug",!0),$(window).RnTimer("option","onAdd",function(){console.log("[EVENT] New timer added ("+this.name+")")}),$(window).RnTimer("option","onStart",function(){console.log("[EVENT] Timer has been started ("+this.name+")")}),$(window).RnTimer("option","onStop",function(){console.log("[EVENT] Timer has been stopped ("+this.name+")")}),$(window).RnTimer("option","onPause",function(n){console.log("[EVENT] Timer has been paused ("+this.name+") ("+n.pauseTimeMs+" ms)")}),$(window).RnTimer("option","onSetInterval",function(n){console.log("[EVENT] Timer interval changed ("+this.name+") (old:"+n.oldInt+") (new:"+n.newInt+")")}),$(window).RnTimer("option","onAddCallback",function(n){console.log('[EVENT] Callback added to timer "'+this.name+'" ('+n.name+")")}),$(window).RnTimer("option","onRemoveCallback",function(n){console.log('[EVENT] Callback removed from timer "'+this.name+'" ('+n.name+")")}),$(window).RnTimer("option","onClearCallbacks",function(){console.log('[EVENT] All callbacks removed from timer "'+this.name+'"')}),$(window).RnTimer("option","onStartAll",function(){console.log("[EVENT] All timers have been started")}),$(window).RnTimer("option","onStopAll",function(){console.log("[EVENT] All timers have been stopped")}),$(window).RnTimer("option","onPauseAll",function(n){console.log('[EVENT] All timers have been paused for "'+n.pauseTimeMs+'ms"')}),$(window).RnTimer("option","onChangeAllIntervals",function(n){console.log('[EVENT] All timers intervals have been changed to "'+n.newInt+'ms"')}),$("div#timerAdmin > button.add").click(function(){$(window).RnTimer("add","timer"+t,250);var n='<div class="timerControls timer{{timerNo}}" data-timer="timer{{timerNo}}">\r\n<span class="timer{{timerNo}}">Timer {{timerNo}}<\/span>\r\n<button class="start">Start<\/button>\r\n<button class="pause">Pause<\/button>\r\n<button class="stop">Stop<\/button>\r\n<button class="changeInterval">Set Interval<\/button>\r\n<button class="addCallback">Add Callback<\/button>\r\n<button class="clearCallbacks">Clear Callbacks<\/button>\r\n<button class="removeCallback">Remove Callback<\/button>\r\n<\/div>'.replace(/{{timerNo}}/g,t++);$("div#allTimerControls").append(n)});$(document).on("click","button.start",function(){$(window).RnTimer("start",getTimerName(this))});$(document).on("click","button.stop",function(){$(window).RnTimer("stop",getTimerName(this))});$(document).on("click","button.changeInterval",function(){var n=prompt("New interval",500),t=isNaN(n)?500:n;$(window).RnTimer("setInterval",getTimerName(this),t)});$(document).on("click","button.addCallback",function(){$(window).RnTimer("addCallback",getTimerName(this),"fnCallback_"+r++,i,{key:"value",key2:"value2"})});$(document).on("click","button.clearCallbacks",function(){$(window).RnTimer("clearCallbacks",getTimerName(this))});$(document).on("click","button.removeCallback",function(){var t=getTimerName(this),r=$(window).RnTimer("getCallbacks",t),i=$("<ol >");$.each(r,function(r){i.append($("<li />").append($("<a />").attr("href","#").data("name",r).text(r).click(function(){$(window).RnTimer("removeCallback",t,$(this).data("name")),n.empty().removeClass("show")})))}),n.addClass("show").html("").append('<div class="clearMsg">[close]<\/div>').append('<p>Click on a callback to remove it from "<strong>'+t+'<\/strong>"<\/p>').append(i),$("html, body").animate({scrollTop:n.offset().top},1500)});$(document).on("click","button.pause",function(){var n=prompt("Pause time (ms)",750),t=isNaN(n)?750:n;$(window).RnTimer("pause",getTimerName(this),t)});$(document).on("click","div#userInteraction > div.clearMsg",function(){n.removeClass("show").html("")});$("button#startAll").click(function(){$(window).RnTimer("startAll")}),$("button#stopAll").click(function(){$(window).RnTimer("stopAll")}),$("button#pauseAll").click(function(){var n=prompt("Pause time (ms)",3e3),t=isNaN(n)?3e3:n;$(window).RnTimer("pauseAll",t)}),$("button#setAllInt").click(function(){var n=prompt("New interval",500),t=isNaN(n)?500:n;$(window).RnTimer("changeAllIntervals",t)}),$("button#debugOn").click(function(){console.log("Turning debugging ON"),$(window).RnTimer("option","debug",!0)}),$("button#debugOff").click(function(){console.log("Turning debugging OFF"),$(window).RnTimer("option","debug",!1)}),$("button#clearConsole").click(function(){console.clear()}),$(window).RnTimer("add","timer1",250);var i=function(n){console.log("callback - ("+this.timerName+") (ticks:"+n+")")},n=$("div#userInteraction"),r=1,t=2});
//@ sourceMappingURL=jquery.RnTimer.min.js.map